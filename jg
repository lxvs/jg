#!/bin/sh
set -o nounset
set -o noglob

die () {
    while test $# -ge 1
    do
        Prompt >&2 red "$1"
        shift
    done
    exit 1
}

Prompt () {
    local red="[91m"
    local green="[92m"
    local yellow="[93m"
    local reset="[0m"
    local color=$1
    shift
    if ! test -t 1
    then
        printf "%s\n" "$@"
        return
    fi
    case $color in
    r|red)
        color=$red
        ;;
    g|grn|green)
        color=$green
        ;;
    y|ylw|yellow)
        color=$yellow
        ;;
    *)
        printf >&2 "warning: invalid color \`%s'\n" "$color"
        printf "%s\n" "$@"
        return
        ;;
    esac
    printf "${color}%s${reset}\n" "$@"
}

ParseSwitchValue () {
    test "$#" -ge 2 ||
        die "error: \`$1' requires a value"
    printf "%s" "$2"
}

GetBeyondCompare () {
    local bc_reg_p='HKCU\Software\Scooter Software\Beyond Compare'
    local bc_reg_k="ExePath"
    test "$JG_BC_PATH" && bc=$JG_BC_PATH && return
    printf "%s" "$OS" | grep -qi '^win' ||
        die "Sorry, this operation is Windows only for now."
    bc=$(reg query "$bc_reg_p" //v "$bc_reg_k" 2>/dev/null)
    test "$bc" ||
        die "error: Couldn't find Beyond Compare." \
        "Please define the absolute path to bcompare.exe in JG_BC_PATH and restart shell."
    bc=$(printf "%s" "$bc" | grep "ExePath" | sed 's/\s\{4\}.*\s\{4\}//')
}

LookUpUsage () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return 1
            ;;
        esac
        shift
    done
}

Usage () {
cat <<EOF
usage: jg [-v | --version] [-h | --help] <command> [<args>]

These are all commands used in various situations:

do things
    bcmerge     Resolve merge conflicts using Beyond Compare
    batch       Execute a command for each repo in current directory
    fixup       Fixup a commit and auto squashing rebase it non-interactively
    push        Push local commits to Gerrit for review

examine things
    bcdiff      Show changes using Beyond Compare
    chid        Find a commit using given pattern; or get current Change-Id
    dog         Show commit logs a better way
    dogr        Show commit logs a better way
    adog        Show all commit logs a better way
    dof         Show commit logs a better way, first parent only
    ls-files    List all files, including initialized submodules by default

for GitHub
    gh-help         Show help on the prerequisites to use below commands
    gh-create-repo  Create a public or private GitHub repository
    gh-delete-repo  Delete a GitHub repository

Use \`jg <command> --help' for detailed usage on the specific command.
EOF
}

Logo () {
cat <<EOF

    jg $version
    $website

EOF
}

batchUsage () {
cat <<EOF
usage: jg batch [<options>] '<command> [<command-args> ...]'

    -f, --force         Do not break when error
    -r, --recursive     Recurse into subderectories
    -s, --submodule     Include submodules
    --maxdepth N        Descend at most N (a non-negative integer) levels of
                        directories; implies --recursive
    --mindepth N        Skip at levels less than N (a non-negative integer);
                        implies --recursive

Execute the specified command for each repository in current directory.
EOF
}

batchOp () {
    local force= ec= cmd= recursive= submodule= maxdepth= mindepth= deptharg= typearg= forcearg=
    local stop_parsing=
    while test $# -ge 1
    do
        if test "$stop_parsing"
        then
            cmd="$cmd $1"
            shift
            continue
        fi
        case $1 in
        --help)
            ${op}Usage
            return
            ;;
        --force)
            force=1
            shift
            ;;
        --recursive)
            recursive=1
            shift
            ;;
        --submodule|--submodules|--sub-module|--sub-modules)
            submodule=1
            shift
            ;;
        --maxdepth)
            test "${2-}" ||
                test is_digit "$2" ||
                die "error: \`$1' requires a non-negative integer value"
            maxdepth=$2
            shift 2
            ;;
        --mindepth)
            test "${2-}" ||
                test is_digit "$2" ||
                die "error: \`$1' requires a non-negative integer value"
            mindepth=$2
            shift 2
            ;;
        --)
            stop_parsing=1
            shift
            ;;
        -*)
            flags=${1#-}
            while test "$flags"
            do
                flag=$(printf "%s" "$flags" | cut -b1)
                case $flag in
                h)
                    ${op}Usage
                    return
                    ;;
                f)
                    force=1
                    ;;
                r)
                    recursive=1
                    ;;
                s)
                    submodule=1
                    ;;
                *)
                    die "error: unknown flag: $flag"
                    ;;
                esac
                flags=${flags#$flag}
            done
            shift
            ;;
        *)
            cmd="$cmd $1"
            shift
            ;;
        esac
    done

    if ! (test "$recursive" || test "$maxdepth" || test "$mindepth")
    then
        maxdepth=2
        mindepth=2
    fi

    test "$maxdepth" && deptharg="$deptharg-maxdepth $maxdepth "
    test "$mindepth" && deptharg="$deptharg-mindepth $mindepth "
    test "$submodule" || typearg="-type d"
    test "$force" || forcearg='-quit'

    find . $deptharg -name .git ! -path '*/.git/*' $typearg -printf '[93m%h[0m\n' ! -execdir sh -c "$cmd" ';' $forcearg
}

is_digit() {
    case $1 in
    ''|*[!0-9]*)
        return 1
        ;;
    *)
        return 0
        ;;
    esac
}

bcdiffUsage () {
cat <<EOF
usage: jg bcdiff [<options>] [<commit> [<commit>]] [--] [<path>...]

Show changes using Beyond Compare. Options will be passed to git-difftool.
Try \`git difftool -h' or \`git help difftool' for more information.

Path to Beyond Compare will be queried from Registry; it can be overridden
by setting environment variable JG_BC_PATH to the absolute path to Beyound
Compare.
EOF
}

bcdiffOp () {
    local bc=
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git difftool --dir-diff --extcmd="$bc" "$@"
}

bcmergeUsage () {
cat <<EOF
usage: jg bcmerge [<file to merge> ...]

Resolve merge conflicts using Beyond Compare. If <file to merge> is not
specified, resolve all conflicted files one by one.

By default, git creates \`*.orig' backup files while resolving merges. These
are safe to remove once a file has been merged and its git mergetool
session has completed.

Setting the mergetool.keepBackup configuration variable to false causes git
mergetool to automatically remove the backup as files are successfully
merged.

Path to Beyond Compare will be queried from Registry; it can be overridden
by setting environment variable JG_BC_PATH to the absolute path to Beyound
Compare.
EOF
}

bcmergeOp () {
    local bc=
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git -c "merge.tool=bcjg" \
        -c "mergetool.bcjg.cmd=\"${bc}\" \"\$LOCAL\" \"\$REMOTE\" \"\$BASE\" \"\$MERGED\"" \
        -c "mergetool.bcjg.trustExitCode=true" \
        mergetool "$@"
}

chidUsage () {
cat <<EOF
usage: jg chid [<options>] <pattern>
   or: jg chid

Find a commit whose Gerrit Change-Id matches given sed-regex pattern. If no
pattern was specified, get the Change-Id of the current commit. Options will be
passed to git-show.
EOF
}

chidOp () {
    local pattern= args=
    local commit
    if test $# = 0
    then
        git show --no-patch HEAD --format=%b |
            grep '^Change-Id: ' |
            sed 's/^Change-Id: //'
        return
    fi
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return
            ;;
        -*)
            args="$args $1"
            shift
            ;;
        *)
            pattern=$1
            shift
            break
            ;;
        esac
    done
    git rev-parse || return
    test "$pattern" || return
    commit=$(git rev-list --all --format="%b%H" |
        sed -n "/^Change-Id: I\{0,1\}[[:xdigit:]]\{0,39\}$pattern/{n;p}")
    test "$commit" || return
    git show --no-patch $args $commit $@
}

pushUsage () {
cat <<EOF
usage: jg push [-r <remote>] [<branch>] [<options>]

Push local commits to Gerrit for review. Options will be passed to git-push.
Default <remote> and <branch> are the current. this command is equivalent to:

    git push [<options>] <remote> HEAD:refs/for/<branch>
EOF
}

pushOp () {
    local branch= remote= args=
    local up rm_d br_d
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return
            ;;
        -r|--remote)
            remote=$(ParseSwitchValue "$@")
            shift 2
            ;;
        -*)
            args="$args $1"
            shift
            ;;
        *)
            test "$branch" &&
                die "error: invalid argument: \`$1'"
            branch=$1
            shift
            ;;
        esac
    done
    git rev-parse || return
    br_d=$(git rev-parse --abbrev-ref HEAD) || return
    up=$(git rev-parse --abbrev-ref @{push}) || return
    rm_d="${up%/$br_d}"
    git push $args ${remote:-$rm_d} HEAD:refs/for/"${branch:-$br_d}"
}

dogUsage () {
cat <<EOF
jg dog = git log --decorate --oneline --graph
jg adog = git log --all --decorate --oneline --graph
jg dof = git log --decorate --oneline --first-parent

You can use wildcards when specifying branches, but make sure to quote them
in this case, otherwise Shell will expand wildcards to filenames.

jg dogr is similar to jg dog; the only difference is that when wildcards
are used, dogr matches only remote branches while dog matches only local
ones.
EOF
}

dogOp () {
    local parsing=1 matched
    LookUpUsage "$@" || return
    for arg in "$@"
    do
        test "$arg" = "--" && parsing=
        if test "$parsing" &&
            printf "%s" "$arg" | grep -q '\*\|?'
        then
            matched=$(git branch --format='%(refname:short)' ${isdogr+"-r"} -l "$arg")
            test "$matched" ||
                die "error: \`$arg' matches no branch"
            set -- "$@" $matched
        else
            set -- "$@" "$arg"
        fi
        shift
    done
    git log --decorate --oneline --graph "$@"
}

dogrUsage () {
    dogUsage
}

dogrOp () {
    local isdogr=1
    dogOp "$@"
}

adogUsage () {
    dogUsage
}

adogOp () {
    dogOp --all "$@"
}

dofUsage () {
    dogUsage
}

dofOp () {
    LookUpUsage "$@" || return
    git log --decorate --oneline --first-parent "$@"
}

fixupUsage () {
cat <<EOF
usage: jg fixup [-n|--no-rebase] <commit> [<options>]

    -n, --no-rebase     Fixup only; do not rebase

It is equivalent to

    git commit --fixup=<commit> [<options>]

and then (unless -n or --no-rebase is specified)

    git rebase --interactive --autosquash --autostash --update-refs <commit>~2

and the editor won't pop out.

EOF
}

fixupOp () {
    local commit= n= options= commit_hash=
    fixupOp_parse "$@"
    fixupOp_validate
    git commit --fixup="$commit" $options || return
    test "$n" && return
    git -c sequence.editor=: \
        -c rebase.updateRefs=true \
        rebase --interactive --autosquash --autostash "$commit_hash~1"
}

fixupOp_parse () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            exit
            ;;
        -n|--no-rebase)
            n=1
            shift
            ;;
        -*)
            options="$options $1"
            shift
            ;;
        *)
            test "$commit" &&
                die "error: invalid argument \`$1'"
            commit=$1
            shift
            ;;
        esac
    done
}

fixupOp_validate () {
    test "$commit" || die "error: <commit> not speficied"
    git rev-parse --verify --quiet --no-revs "$commit^2" &&
        die "error: cannot fixup a merge"
    commit_hash=$(git rev-parse --verify --revs-only "$commit") ||
        die "error: invalid revision: $commit"
}

ls_filesUsage () {
cat <<EOF
usage: jg ls-files [-0] [<options>] [<tree-ish>] [<path> ...]

This is a modified version of \`git-ls-tree', with below differences.

    * Add \`-0' to separate paths with null characters instead of newlines.
    * Always specify -r.
    * Output as if --name-only is specified.
    * Recurse into intialized submodules.
    * <tree-ish> is HEAD, if not specified

See \`git ls-tree --help' for more options.
EOF
}

ls_filesOp () {
    local treeish
    local want_value=
    local stop_parsing=
    local null_char=
    local output=
    for arg in "$@"
    do
        case $want_value,$stop_parsing,$arg in
        ,,-0)
            null_char=1
            ;;
        ,,-h|,,--help)
            ls_filesUsage
            exit 0
            ;;
        ,,--)
            stop_parsing=1
            ;;
        ,,-*)
            set -- "$@" "$arg"
            ;;
        ,*,*)
            if test ! "${treeish+set}"
            then
                treeish=$arg
            else
                set -- "$@" "$arg"
            fi
            ;;
        ,*,*)
            set -- "$@" "$arg"
            ;;
        *,*,*)
            case $want_value in
            '')
                ;;
            *)
                >&2 printf "warning: invalid want_value \`%s'\n" "$want_value"
                ;;
            esac
            want_value=
            ;;
        esac
        shift
    done
    test "$want_value" && die "error: \`$want_value' requires a value"
    output=$(git ls-tree -z -r -- "${treeish-HEAD}" "$@" | tr '\0' '\n')
    for displaypath in $(git submodule foreach --quiet --recursive 'echo "$displaypath"')
    do
        output=$(printf "%s\n" "$output" \
                "$(git -C "$displaypath" ls-tree -z -r -- "${treeish-HEAD}" "$@" \
                    | tr '\0' '\n' | awk '{print $1, $2, $3 "\t" ($4 = "'"$displaypath/"'"$4)}')")
    done
    if test "$null_char"
    then
        printf "%s\n" "$output" | grep ' blob ' | cut -f 2 | tr '\n' '\0'
    else
        printf "%s\n" "$output" | grep ' blob ' | cut -f 2
    fi
}

gh_helpOp () {
cat <<EOF
To use \`For GitHub' commands like \`gh-create-repo', first you need to create
a personal access token.

 * Open github.com and login to your account.
 * Navigate to GitHub Settings -> Developer settings -> Personal access tokens
   -> Fine-grained personal access tokens.
 * Click \`Generate new token'.
 * In \`Repository access' section, either \`All repositories' or \`Only select
   repositories' needs to be selected.
 * Set Repository permissions -> Administration to \`Read and Write'.
 * Click \`Generate token' at the bottom of the page.
 * Copy the generated token.  Once you leave the page, you cannot see it again.
EOF
}

ghcrUsage () {
    gh_create_repoUsage
}

ghcrOp () {
    gh_create_repoOp "$@"
}

gh_create_repoUsage () {
cat <<EOF
usage: jg gh-create-repo [<options>] <name>

options:
    -t, --token <token>         GitHub personal access token
    -p, --private               Create a private repo instead

Create a public (or private, if specified so) GitHub repository with given name.
Note that the name of repository can only contain letters, digits, dashes (-),
dots (.) and underscores (_).

If not specified, <token> will be read from environment variable JG_GH_TOKEN.

Try \`jg gh-help' for more information on GitHub personal access token.
EOF
}

gh_create_repoOp () {
    local token= name=
    local private
    gh_create_repoOp_parse "$@"
    gh_create_repoOp_validate
    curl -L -s -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/user/repos \
        -d "{\"name\": \"$name\"${private:+, \"private\": true}}"
}

gh_create_repoOp_parse () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            exit
            ;;
        -t|--token)
            token=$(ParseSwitchValue "$@")
            shift 2
            ;;
        -p|--private)
            private=1
            shift
            ;;
        *)
            test "$name" &&
                die "error: invalid argument \`$1'"
            name=$1
            shift
            ;;
        esac
    done
}

gh_create_repoOp_validate () {
    test "$name" ||
        die "error: Repo name is required."
    test "$(printf "%s" "$name" | tr -d '[:alnum:]\-_.')" &&
        die "error: Repo name can only contain letters, digits, \`-', \`.' and \`_'."
    validate_gh_token
}

validate_gh_token () {
    test "$token" ||
        token=$JG_GH_TOKEN
    test "$token" ||
        die "error: either provide --token, or set environment variable JG_GH_TOKEN"
}

gh_delete_repoUsage () {
cat <<EOF
usage: jg gh-delete-repo [<options>] <owner>/<repo>

options:
    -t, --token <token>         GitHub personal access token

Delete a GitHub repository PERMANENTLY, WITHOUT CONFIRMATION.  It cannot be
undone, so USE WITH GREAT CAUTION!

If not specified, <token> will be read from environment variable JG_GH_TOKEN.

Try \`jg gh-help' for more information on GitHub personal access token.
EOF
}

gh_delete_repoOp () {
    local owner_slash_repo= token=
    gh_delete_repoOp_parse "$@"
    gh_delete_repoOp_validate
    curl -Ls \
        -X DELETE \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/$owner_slash_repo
}

gh_delete_repoOp_parse () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            exit
            ;;
        -t|--token)
            token=$(ParseSwitchValue "$@")
            shift 2
            ;;
        *)
            test "$owner_slash_repo" &&
                die "error: invalid argument \`$1'"
            owner_slash_repo=$1
            shift
            ;;
        esac
    done
}

gh_delete_repoOp_validate () {
    test "$owner_slash_repo" ||
        die "error: owner and repo is required."
    test "$(printf "%s" "$owner_slash_repo" | tr -dc '/')" ||
        die "error: please provide owner and repo as \`OWNER/REPO'"
    validate_gh_token
}

ParseArgs () {
    local op
    if test $# -eq 0
    then
        Logo
        Usage
        return
    fi
    case $1 in
    -v|--version)
        Logo
        exit
        ;;
    -h|--help)
        Logo
        Usage
        exit
        ;;
    batch|bcdiff|bcmerge|chid|push|dog|dogr|adog|dof|fixup|ghcr)
        op=$1
        shift
        ${op}Op "$@"
        return
        ;;
    ls-files|gh-help|gh-create-repo|gh-delete-repo)
        op=$(printf "%s" "$1" | tr '-' '_')
        shift
        ${op}Op "$@"
        return
        ;;
    *)
        die "error: invalid argument \`$1'" \
            "Try \`jg --help' for more information."
        ;;
    esac
}

main () {
    local version="2.10.1"
    local website="https://github.com/lxvs/jg"
    local JG_BC_PATH=${JG_BC_PATH-}
    local JG_GH_USER=${JG_GH_USER-}
    local JG_GH_TOKEN=${JG_GH_TOKEN-}
    local OS=${OS-}
    ParseArgs "$@" || return
}

main "$@"
