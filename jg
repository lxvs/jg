#!/bin/bash
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

pushd () {
    command pushd "$@" 1>/dev/null
}

popd () {
    command popd "$@" 1>/dev/null
}

# $1    : Color - red/yellow/green
# ...   : string lines
Prompt () {
    local -r RED="[91m"
    local -r GRN="[92m"
    local -r YLW="[93m"
    local -r RST="[0m"
    local -r COLOR_ARG="$1"
    local color
    shift
    case "$COLOR_ARG" in
    r|red) color="$RED" ;;
    g|grn|green) color="$GRN" ;;
    y|ylw|yellow) color="$YLW" ;;
    *)
        >&2 Prompt red "ERROR: Unknown color argument - $COLOR_ARG"
        return 1
        ;;
    esac
    printf "${color}%s${RST}\n" "$@"
}

ParseSwitchValue () {
    sw="$1"
    if test "$#" -ge 2 && ! grep -q '^-' <<<"$2"
    then
        val="$2"
        return
    fi
    >&2 Prompt red "ERROR: $sw requires a value."
    return 1
}

GetBeyondCompare () {
    local -r bc_reg_p='HKCU\Software\Scooter Software\Beyond Compare'
    local -r bc_reg_k="ExePath"
    if ! grep -qi '^win' <<<"$OS"
    then
        >&2 Prompt red "Sorry, this operation is Windows only for now."
        return 1
    fi
    bc=$(reg query "$bc_reg_p" //v "$bc_reg_k" 2>/dev/null)
    if test ! "${bc-}"
    then
        >&2 Prompt red "ERROR: Couldn't find Beyond Compare."
        return 1
    fi
    bc=$(grep "ExePath" <<<"$bc" | sed 's/\s\{4\}.*\s\{4\}//')
}

LookUpUsage () {
    while test $# -ge 1
    do
        case "$1" in
        -h|--help)
            ${op}Usage
            return 1
            ;;
        esac
        shift
    done
}

Usage () {
cat <<\USG

Usage:

    jg { -v | --version }
    jg { -h | --help }
    jg <command> [<args>]

Commands:

    batch, bcdiff, bcmerge, chid, push, dog, dogr, adog, dof

Use `jg <command> --help` for details.

USG
}

Logo () {
cat <<LOGO

    jg $VER
    $INFO

LOGO
}

batchUsage () {
cat <<\BATCHUSG

Usage:

    jg batch [<options>] <command> [<command-args> ...]

Execute <command> for each repo in current folder.

Options:

    -f, --force         do not break when error

Example:

    jg batch git pull --ff-only

BATCHUSG
}

batchOp () {
    local force="no"
    while test $# -ge 1
    do
        case "$1" in
        -h|--help)
            ${op}Usage
            return
            ;;
        -f|--force)
            force="yes"
            shift
            break
            ;;
        *)
            break
            ;;
        esac
    done
    for repo in $(ls -d */ 2>/dev/null)
    do
        test ! -e "$repo/.git" && continue
        pushd "$repo"
        Prompt yellow "$repo"
        test ! "$force" = "yes"
        "$@" || return
        popd
    done
}

bcdiffUsage () {
cat <<\BCDIFFUSG

Usage:

    jg bcdiff [<option>...]

Diff with Beyond Compare. <Option>, if any, will be passed to git difftool.
Try 'git difftool --help' for more information.

If you want to diff the staged changes, use 'jg bcdiff --cached'.

BCDIFFUSG
}

bcdiffOp () {
    local bc
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git -c "diff.tool=BeyondCompare" \
        -c "difftool.BeyondCompare.cmd=\"${bc}\" \"\$(cygpath -w \"\$LOCAL\")\" \"\$REMOTE\"" \
        difftool --dir-diff "$@"
}

bcmergeUsage () {
cat <<\BCMERGEUSG

Usage:

    jg bcmerge [<file to merge> ...]

Resolve merge conflicts with Beyond Compare. If <file to merge> is not
specified, resolve all conflicted files one by one.

BCMERGEUSG
}

bcmergeOp () {
    local bc
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git -c "merge.tool=BeyondCompare" \
        -c "mergetool.BeyondCompare.cmd=\"${bc}\" \"\$(cygpath -w \"\$LOCAL\")\" \"\$REMOTE\" \"\$BASE\" \"\$MERGED\"" \
        -c "mergetool.BeyondCompare.trustExitCode=true" \
        mergetool "$@"
}

chidUsage () {
cat <<\CHIDUSG

Usage:

    jg chid [<Change-ID>]

Find a commit with given Gerrit Change-ID. If <Change-ID> is not specified,
get the Change-ID of the current commit.

CHIDUSG
}

chidOp () {
    local chid
    local commit
    local args
    if test $# = 0
    then
        git log -1 --format=%b |
            grep '^Change-Id: ' |
            sed 's/^Change-Id: //'
        return
    fi
    while test $# -ge 1
    do
        case "$1" in
        -h|--help)
            ${op}Usage
            return
            ;;
        -*)
            args="${args-} $1"
            shift
            ;;
        *)
            chid="$1"
            shift
            break
            ;;
        esac
    done
    git rev-parse || return
    test "${chid-}" || return
    commit=$(git log --format="%b%H" |
        sed -n "/^Change-Id: $chid[0-9a-f]\{,40\}\$/{n;p;q}")
    test "$commit" || return
    git show -s ${args-} $commit $@
}

pushUsage () {
cat <<\PUSHUSG

Usage:

    jg push [-r <remote>] [<branch>] [<option> ...]

Push local commits to Gerrit. Default <remote> and <branch> are the current.
This command is equivalent to:

    git push [<option> ...] <remote> HEAD:refs/for/<branch>

PUSHUSG
}

pushOp () {
    local branch
    local remote
    local up
    local rm_d
    local br_d
    local args
    local sw
    local val
    while test $# -ge 1
    do
        sw="$1"
        case "$sw" in
        -h|--help)
            ${op}Usage
            return
            ;;
        -r|--remote)
            ParseSwitchValue "$@" || return
            remote="$val"
            shift 2
            ;;
        -*)
            args="${args-} $sw"
            shift
            ;;
        *)
            if test "${branch-}"
            then
                >&2 Prompt red "ERROR: Invalid argument: $sw"
                return 1
            else
                branch="$sw"
                shift
            fi
            ;;
        esac
    done
    git rev-parse || return
    br_d=$(git rev-parse --abbrev-ref HEAD) || return
    up=$(git rev-parse --abbrev-ref @{push}) || return
    rm_d="${up%/$br_d}"
    git push ${args-} ${remote-$rm_d} HEAD:refs/for/"${branch-$br_d}"
}

dogUsage () {
cat <<DOGUSG

jg dog = git log --decorate --oneline --graph
jg adog = git log --all --decorate --oneline --graph
jg dof = git log --decorate --oneline --first-parent

You can use wildcards when specifying branches, but make sure to quote them
in this case, otherwise Shell will expand wildcards to filenames.

jg dogr is similar to jg dog; the only difference is that when wildcards
are used, dogr matches only remote branches while dog matches only local
ones.

DOGUSG
}

dogOp () {
    local brs
    LookUpUsage "$@" || return
    brs="$@"
    printf "%s" "$@" | grep -q '\*\|\?' && dogOp_ParseArgs "$@"
    git log --decorate --oneline --graph $brs
}

dogOp_ParseArgs () {
    brs=""
    for arg in "$@"
    do
        if printf "%s" "$arg" | grep -q '\*\|\?'
        then
            brs="$brs $(git branch --format='%(refname:short)' -l ${JG_DOGR+"-r"} "$arg")"
        else
            brs="$brs $arg"
        fi
    done
}

dogrUsage () {
    dogUsage
}

dogrOp () {
    local JG_DOGR=1
    dogOp "$@"
}

adogUsage () {
    dogUsage
}

adogOp () {
    dogOp --all "$@"
}

dofUsage () {
    dogUsage
}

dofOp () {
    LookUpUsage "$@" || return
    git log --decorate --oneline --first-parent "$@"
}

ParseArgs () {
    local op
    if test $# -eq 0
    then
        Logo
        Usage
        return
    fi
    while test $# -ge 1
    do
        case "$1" in
        -v|--ver|--version)
            Logo
            return
            ;;
        -h|--help)
            Logo
            Usage
            return
            ;;
        batch|bcdiff|bcmerge|chid|push|dog|dogr|adog|dof)
            op="$1"
            shift
            ${op}Op "$@"
            return
            ;;
        *)
            >&2 Prompt red "ERROR: Invalid operation - $1"
            >&2 Usage
            return 1
            ;;
        esac
    done
}

main () {
    local -r VER="2.1.3"
    local -r INFO="https://github.com/lxvs/jg"
    local args
    ParseArgs "$@" || return
}

main "$@"
