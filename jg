#!/bin/sh
set -o nounset
set -o noglob

die () {
    while test $# -ge 1
    do
        Prompt >&2 red "$1"
        shift
    done
    exit 1
}

Prompt () {
    local red="[91m"
    local green="[92m"
    local yellow="[93m"
    local reset="[0m"
    local color=$1
    shift
    if ! test -t 1
    then
        printf "%s\n" "$@"
        return
    fi
    case $color in
    r|red)
        color=$red
        ;;
    g|grn|green)
        color=$green
        ;;
    y|ylw|yellow)
        color=$yellow
        ;;
    *)
        printf >&2 "warning: invalid color \`%s'\n" "$color"
        printf "%s\n" "$@"
        return
        ;;
    esac
    printf "${color}%s${reset}\n" "$@"
}

ParseSwitchValue () {
    test "$#" -ge 2 ||
        die "error: \`$1' requires a value"
    printf "%s" "$2"
}

GetBeyondCompare () {
    local bc_reg_p='HKCU\Software\Scooter Software\Beyond Compare'
    local bc_reg_k="ExePath"
    test "$JG_BC_PATH" && bc=$JG_BC_PATH && return
    printf "%s" "$OS" | grep -qi '^win' ||
        die "Sorry, this operation is Windows only for now."
    bc=$(reg query "$bc_reg_p" //v "$bc_reg_k" 2>/dev/null)
    test "$bc" ||
        die "error: Couldn't find Beyond Compare." \
        "Please define the absolute path to bcompare.exe in JG_BC_PATH and restart shell."
    bc=$(printf "%s" "$bc" | grep "ExePath" | sed 's/\s\{4\}.*\s\{4\}//')
}

LookUpUsage () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return 1
            ;;
        esac
        shift
    done
}

Usage () {
cat <<EOF
usage: jg [-v | --version] [-h | --help] <command> [<args>]

These are all commands used in various situations:

do things
    archive     Create an archive of a tag or commit
    bcmerge     Resolve merge conflicts using Beyond Compare
    batch       Execute a command for each repo in current directory
    push        Push local commits to Gerrit for review
    ghcr        Create a GitHub repository

examine things
    bcdiff      Show changes using Beyond Compare
    chid        Find a commit using given pattern; or get current Change-Id
    dog         Show commit logs a better way
    dogr        Show commit logs a better way
    adog        Show all commit logs a better way
    dof         Show commit logs a better way, first parent only

Use \`jg <command> --help' for detailed usage on the specific command.
EOF
}

Logo () {
cat <<EOF

    jg $version
    $website

EOF
}

archiveUsage () {
cat <<EOF
usage: jg archive [<options>] [<commit-ish>] [<path>...]

This is a modified version of git-archive, with below differences:

    Archive with checked out submodules at HEAD non-recursively by default; can
    be disabled by flag \`-n' or \`--no-with-submodules'.

    <commit-ish> is HEAD, if not specified. Note that submodules checked out at
    HEAD, not <commit-ish>, will be archived, if \`-n' or \`--no-with-submodules'
    is absent, and submodules will be archived at their own HEAD.

    Always archive the whole repository, even executed in a sub-directory (but
    not in a submodule).

    Specify \`--prefix=DIRNAME-DESCRIPTION/', where DIRNAME is the name of the
    repository, and DESCRIPTION is whatever output of \`git describe --always
    <commit-ish>', prefixed \`v' removed, if there is.

    Write the archive to DIRNAME-DESCRIPTION.tgz in root directory of the
    repository.

options:
    --with-submodules       archive with all submodules; this is default
    -n, --no-with-submodules
                            archive without any submodule
    --worktree-attributes   read .gitattributes in working directory
    -NUM                    set compression level
EOF
}

archiveOp () {
    local w=1 wa= num=5
    local toplevel dirname description prefix tmpdir
    local commitish=
    while test $# -ge 1
    do
        case $1 in
        -n|--no-with-submodules)
            w=
            shift
            ;;
        --with-submodules)
            w=1
            shift
            ;;
        --worktree-attributes)
            wa=$1
            shift
            ;;
        -1|-2|-3|-4|-5|-6|-7|-8|-9)
            num=${1#-}
            shift
            ;;
        -h|--help)
            archiveUsage
            exit
            ;;
        -*)
            die "error: invalid switch \`$1'"
            ;;
        *)
            test "$commitish" && die "error: invalid argument \`$1'"
            commitish=$1
            shift
            ;;
        esac
    done
    commitish=${commitish:-HEAD}
    (
        cd "$(git rev-parse --show-toplevel)" || return
        toplevel=$PWD
        description=$(git describe --always "$commitish") || return
        description=${description#v} || return
        dirname=$(basename -- "$toplevel") || return
        prefix="$dirname-$description"
        tmpdir=$(mktemp --directory) || return
        trap archiveOp_cleanup EXIT
        mkdir -p "$tmpdir/$prefix" || return
        git rev-parse --verify --quiet "$commitish" >/dev/null ||
            die "error: not a valid object name: \`$commitish'"
        git archive $wa --prefix="$prefix/" "$commitish" | tar -x -C "$tmpdir" || return
        if test "$w"
        then
            git submodule foreach --quiet --recursive 'git archive '$wa' --prefix="${PWD#'"$toplevel/"'}/" HEAD | tar -x -C '"$tmpdir/$prefix/" || return
        fi
        tar --use-compress-program="gzip -$num" -c -f "$prefix.tgz" -C "$tmpdir" "$prefix" || return
    )
}

archiveOp_cleanup () {
    rm -rf "$tmpdir"
}

batchUsage () {
cat <<EOF
usage: jg batch [<options>] <command> [<command-args> ...]

    -f, --force     Do not break when error

Execute the specified command for each repository in current directory.
EOF
}

batchOp () {
    local force=
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return
            ;;
        -f|--force)
            force=1
            shift
            break
            ;;
        *)
            break
            ;;
        esac
    done
    set +o noglob
    for repo in */
    do
        test ! -e "${repo}.git" && continue
        (
            cd "$repo" || continue
            git rev-parse 2>/dev/null || continue
            Prompt yellow "$repo"
            "$@" || test "$force" || return
        )
    done
    set -o noglob
}

bcdiffUsage () {
cat <<EOF
usage: jg bcdiff [<options>] [<commit> [<commit>]] [--] [<path>...]

Show changes using Beyond Compare. Options will be passed to git-difftool.
Try \`git difftool -h' or \`git help difftool' for more information.

Path to Beyond Compare will be queried from Registry; it can be overridden
by setting environment variable JG_BC_PATH to the absolute path to Beyound
Compare.
EOF
}

bcdiffOp () {
    local bc=
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git difftool --dir-diff --extcmd="$bc" "$@"
}

bcmergeUsage () {
cat <<EOF
usage: jg bcmerge [<file to merge> ...]

Resolve merge conflicts using Beyond Compare. If <file to merge> is not
specified, resolve all conflicted files one by one.

By default, git creates \`*.orig' backup files while resolving merges. These
are safe to remove once a file has been merged and its git mergetool
session has completed.

Setting the mergetool.keepBackup configuration variable to false causes git
mergetool to automatically remove the backup as files are successfully
merged.

Path to Beyond Compare will be queried from Registry; it can be overridden
by setting environment variable JG_BC_PATH to the absolute path to Beyound
Compare.
EOF
}

bcmergeOp () {
    local bc=
    LookUpUsage "$@" || return
    git rev-parse || return
    GetBeyondCompare || return
    git -c "merge.tool=bcjg" \
        -c "mergetool.bcjg.cmd=\"${bc}\" \"\$LOCAL\" \"\$REMOTE\" \"\$BASE\" \"\$MERGED\"" \
        -c "mergetool.bcjg.trustExitCode=true" \
        mergetool "$@"
}

chidUsage () {
cat <<EOF
usage: jg chid [<options>] <pattern>
   or: jg chid

Find a commit whose Gerrit Change-Id matches given sed-regex pattern. If no
pattern was specified, get the Change-Id of the current commit. Options will be
passed to git-show.
EOF
}

chidOp () {
    local pattern= args=
    local commit
    if test $# = 0
    then
        git show -s HEAD --format=%b |
            grep '^Change-Id: ' |
            sed 's/^Change-Id: //'
        return
    fi
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return
            ;;
        -*)
            args="$args $1"
            shift
            ;;
        *)
            pattern=$1
            shift
            break
            ;;
        esac
    done
    git rev-parse || return
    test "$pattern" || return
    commit=$(git rev-list --all --format="%b%H" |
        sed -n "/^Change-Id: I\{0,1\}[[:xdigit:]]\{0,39\}$pattern/{n;p;q}")
    test "$commit" || return
    git show -s $args $commit $@
}

pushUsage () {
cat <<EOF
usage: jg push [-r <remote>] [<branch>] [<options>]

Push local commits to Gerrit for review. Options will be passed to git-push.
Default <remote> and <branch> are the current. this command is equivalent to:

    git push [<options>] <remote> HEAD:refs/for/<branch>
EOF
}

pushOp () {
    local branch= remote= args=
    local up rm_d br_d val
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            return
            ;;
        -r|--remote)
            remote=$(ParseSwitchValue "$@")
            shift 2
            ;;
        -*)
            args="$args $1"
            shift
            ;;
        *)
            test "$branch" &&
                die "error: invalid argument: \`$1'"
            branch=$1
            shift
            ;;
        esac
    done
    git rev-parse || return
    br_d=$(git rev-parse --abbrev-ref HEAD) || return
    up=$(git rev-parse --abbrev-ref @{push}) || return
    rm_d="${up%/$br_d}"
    git push $args ${remote:-$rm_d} HEAD:refs/for/"${branch:-$br_d}"
}

dogUsage () {
cat <<EOF
jg dog = git log --decorate --oneline --graph
jg adog = git log --all --decorate --oneline --graph
jg dof = git log --decorate --oneline --first-parent

You can use wildcards when specifying branches, but make sure to quote them
in this case, otherwise Shell will expand wildcards to filenames.

jg dogr is similar to jg dog; the only difference is that when wildcards
are used, dogr matches only remote branches while dog matches only local
ones.
EOF
}

dogOp () {
    local brs
    LookUpUsage "$@" || return
    brs="$@"
    if printf "%s" "$@" | grep -q '\*\|\?'
    then
        dogOp_ParseArgs "$@" || return
    fi
    git log --decorate --oneline --graph $brs
}

dogOp_ParseArgs () {
    brs=
    local br=
    for arg in "$@"
    do
        if test "$arg" = "--"
        then
            brs="$brs $@"
            break
        fi
        if printf "%s" "$arg" | grep -q '\*\|\?'
        then
            br=$(git branch --format='%(refname:short)' ${isdogr+"-r"} -l "$arg")
            test "$br" ||
                die "error: \`$arg' matches no branch"
            brs="$brs $br"
        else
            brs="$brs $arg"
        fi
        shift
    done
}

dogrUsage () {
    dogUsage
}

dogrOp () {
    local isdogr=1
    dogOp "$@"
}

adogUsage () {
    dogUsage
}

adogOp () {
    dogOp --all "$@"
}

dofUsage () {
    dogUsage
}

dofOp () {
    LookUpUsage "$@" || return
    git log --decorate --oneline --first-parent "$@"
}

ghcrUsage () {
cat <<EOF
usage: jg ghcr [<options>] <name>

    -u, --user <user>:<token>   GitHub username and access token
    -p, --private               Create a private repo instead

Create a public (or private, if specified so) GitHub repository with given name.
Note that the name of repository can only contain letters, digits, dashes (-),
dots (.) and underscores (_).

If not specified, <user> and <token> (or <token> alone, if only <user> is
specifed) will be read from environment variable JG_GH_USER and JG_GH_TOKEN.
EOF
}

ghcrOp () {
    local user= token= name=
    local private val
    ghcrOp_parse "$@"
    ghcrOp_validate
    curl -s -X POST \
        ${user:+-u $user${token:+:$token}} \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/user/repos \
        -d "{\"name\": \"$name\"${private:+, \"private\": \"true\"}}"
}

ghcrOp_parse () {
    while test $# -ge 1
    do
        case $1 in
        -h|--help)
            ${op}Usage
            exit
            ;;
        -u|--user)
            val=$(ParseSwitchValue "$@")
            shift 2
            user=$(printf "%s" "$val" | cut -d ':' -f 1)
            token=$(printf "%s" "$val" | cut -d ':' -f 2)
            ;;
        -p|--private)
            private=1
            shift
            ;;
        *)
            test "$name" &&
                die "error: invalid argument \`$1'"
            name=$1
            shift
            ;;
        esac
    done
}

ghcrOp_validate () {
    test "$name" ||
        die "error: Repo name is required."
    test "$(printf "%s" "$name" | tr -d '[:alnum:]\-_.')" &&
        die "error: Repo name can only contain letters, digits, \`-', \`.' and \`_'."
    test "$user" ||
        user=$JG_GH_USER
    test "$token" ||
        token=$JG_GH_TOKEN
}

ParseArgs () {
    local op
    if test $# -eq 0
    then
        Logo
        Usage
        return
    fi
    case $1 in
    -v|--version)
        Logo
        exit
        ;;
    -h|--help)
        Logo
        Usage
        exit
        ;;
    archive|batch|bcdiff|bcmerge|chid|push|dog|dogr|adog|dof|ghcr)
        op=$1
        shift
        ${op}Op "$@"
        return
        ;;
    *)
        die "error: invalid argument \`$1'" \
            "Try \`jg --help' for more information."
        ;;
    esac
}

main () {
    local version="2.6.0"
    local website="https://github.com/lxvs/jg"
    local JG_BC_PATH=${JG_BC_PATH-}
    local JG_GH_USER=${JG_GH_USER-}
    local JG_GH_TOKEN=${JG_GH_TOKEN-}
    local OS=${OS-}
    ParseArgs "$@" || return
}

main "$@"
